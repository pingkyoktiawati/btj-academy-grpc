// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/notif.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifServiceClient is the client API for NotifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifServiceClient interface {
	GetQuote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (NotifService_GetQuoteClient, error)
	GenerateImages(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (NotifService_GenerateImagesClient, error)
}

type notifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifServiceClient(cc grpc.ClientConnInterface) NotifServiceClient {
	return &notifServiceClient{cc}
}

func (c *notifServiceClient) GetQuote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (NotifService_GetQuoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotifService_ServiceDesc.Streams[0], "/notif.NotifService/GetQuote", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifServiceGetQuoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotifService_GetQuoteClient interface {
	Recv() (*QuoteResponse, error)
	grpc.ClientStream
}

type notifServiceGetQuoteClient struct {
	grpc.ClientStream
}

func (x *notifServiceGetQuoteClient) Recv() (*QuoteResponse, error) {
	m := new(QuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notifServiceClient) GenerateImages(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (NotifService_GenerateImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotifService_ServiceDesc.Streams[1], "/notif.NotifService/GenerateImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifServiceGenerateImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotifService_GenerateImagesClient interface {
	Recv() (*ImagesResponse, error)
	grpc.ClientStream
}

type notifServiceGenerateImagesClient struct {
	grpc.ClientStream
}

func (x *notifServiceGenerateImagesClient) Recv() (*ImagesResponse, error) {
	m := new(ImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifServiceServer is the server API for NotifService service.
// All implementations must embed UnimplementedNotifServiceServer
// for forward compatibility
type NotifServiceServer interface {
	GetQuote(*QuoteRequest, NotifService_GetQuoteServer) error
	GenerateImages(*ImagesRequest, NotifService_GenerateImagesServer) error
	mustEmbedUnimplementedNotifServiceServer()
}

// UnimplementedNotifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifServiceServer struct {
}

func (UnimplementedNotifServiceServer) GetQuote(*QuoteRequest, NotifService_GetQuoteServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedNotifServiceServer) GenerateImages(*ImagesRequest, NotifService_GenerateImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateImages not implemented")
}
func (UnimplementedNotifServiceServer) mustEmbedUnimplementedNotifServiceServer() {}

// UnsafeNotifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifServiceServer will
// result in compilation errors.
type UnsafeNotifServiceServer interface {
	mustEmbedUnimplementedNotifServiceServer()
}

func RegisterNotifServiceServer(s grpc.ServiceRegistrar, srv NotifServiceServer) {
	s.RegisterService(&NotifService_ServiceDesc, srv)
}

func _NotifService_GetQuote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifServiceServer).GetQuote(m, &notifServiceGetQuoteServer{stream})
}

type NotifService_GetQuoteServer interface {
	Send(*QuoteResponse) error
	grpc.ServerStream
}

type notifServiceGetQuoteServer struct {
	grpc.ServerStream
}

func (x *notifServiceGetQuoteServer) Send(m *QuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotifService_GenerateImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifServiceServer).GenerateImages(m, &notifServiceGenerateImagesServer{stream})
}

type NotifService_GenerateImagesServer interface {
	Send(*ImagesResponse) error
	grpc.ServerStream
}

type notifServiceGenerateImagesServer struct {
	grpc.ServerStream
}

func (x *notifServiceGenerateImagesServer) Send(m *ImagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NotifService_ServiceDesc is the grpc.ServiceDesc for NotifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.NotifService",
	HandlerType: (*NotifServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQuote",
			Handler:       _NotifService_GetQuote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateImages",
			Handler:       _NotifService_GenerateImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notif.proto",
}
